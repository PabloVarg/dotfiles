#! /usr/bin/env bash
set -euo pipefail


base=(
    "linux"
    "linux-firmware"
    "base"
    "base-devel"
    "grub"
    "os-prober"
    "efibootmgr"
    "git"
    "man-db"
    "yay-bin"
    "networkmanager"
    "unzip"
    "maim"
    "xclip"
    "sxhkd"
    "openssh"
    "libnotify"
    "xcape"
    "ufw"
    "lm_sensors"
    "stow"
)

intel_cpu=(
    "intel-ucode"
)

amd_cpu=(
    "amd-ucode"
)

gpu=(
    "nvtop"
)

nvidia=(
    "nvidia"
    "nvidia-utils"
    "nvidia-settings"
    "libva-nvidia-driver"
    "libva-utils"
    "vdpauinfo"
)

sound=(
    "alsa-utils"
    "pipewire"
    "pipewire-alsa"
    "pipewire-pulse"
    "pipewire-jack"
    "playerctl"
    "pavucontrol"
)

xorg=(
    "xorg-server"
    "xorg-xinit"
    "xorg-xrandr"
    "xorg-xinput"
)

gui=(
    "i3-wm"
    "polybar"
    "xwallpaper"
    "picom"
    "redshift-minimal"
    "dunst"
)

utilities=(
    "htop"
    "lf"
    "sxiv"
    "zathura-pdf-mupdf"
    "mpv"
    "lxappearance"
)

terminal=(
    "zsh"
    "zsh-syntax-highlighting"
    "tmux"
)

nvim=(
    "neovim"
    "python-pynvim"
    "nodejs"
    "bun-bin"
    "fd"
    "ripgrep"
)

qemu=(
    "virt-manager"
    "qemu-desktop"
    "libvirt"
    "iptables-nft"
    "dnsmasq"
    "openbsd-netcat"
)

entertainment=(
    "ttf-dejavu"
    "firefox"
    "yt-dlp"
)

fonts=(
    "ttf-fira-code"
    "woff2-font-awesome"
)

gtk_theme=(
    "gruvbox-dark-gtk"
    "papirus-icon-theme"
    "vimix-cursors"
)

packages_to_install=(
    "${base[@]}"
    "${amd_cpu[@]}"
    "${gpu[@]}"
    "${sound[@]}"
    "${xorg[@]}"
    "${gui[@]}"
    "${utilities[@]}"
    "${terminal[@]}"
    "${nvim[@]}"
    "${qemu[@]}"
    "${entertainment[@]}"
    "${fonts[@]}"
    "${gtk_theme[@]}"
)

ensure_aur_pkg_is_installed() {
    repo_dir="${1}"
    repo_url="${2}"

    if command -v "${3}" &> /dev/null; then
        return
    fi

    git clone "${repo_url}" "${repo_dir}"
    (cd "${repo_dir}" && makepgk -si)
    rm -rf "${repo_dir}"
}

ensure_suckless_pkg_is_installed() {
    repo_dir="${1}"
    repo_url="${2}"

    if command -v "${3}" &> /dev/null; then
        return
    fi

    [[ ! -d "${repo_dir}" ]] && git clone "${repo_url}" "${repo_dir}"
    (cd "${repo_dir}" && sudo make install clean)
}


ensure_yay_is_installed() {
    pkg_name="yay"
    repo_dir="${SYSTEM_PROJECTS}/yay-bin"
    repo_url="https://aur.archlinux.org/yay-bin.git"

    ensure_aur_pkg_is_installed "${repo_dir}" "${repo_url}" "${pkg_name}"
}

ensure_st_is_installed() {
    pkg_name="st"
    repo_dir="${SYSTEM_PROJECTS}/st"
    repo_url="https://github.com/PabloVarg/st"

    ensure_suckless_pkg_is_installed "${repo_dir}" "${repo_url}" "${pkg_name}"
}

ensure_dmenu_is_installed() {
    pkg_name="dmenu"
    repo_dir="${SYSTEM_PROJECTS}/dmenu"
    repo_url="https://github.com/PabloVarg/dmenu"

    ensure_suckless_pkg_is_installed "${repo_dir}" "${repo_url}" "${pkg_name}"
}

ensure_slock_is_installed() {
    pkg_name="slock"
    repo_dir="${SYSTEM_PROJECTS}/slock"
    repo_url="https://github.com/PabloVarg/slock"

    ensure_suckless_pkg_is_installed "${repo_dir}" "${repo_url}" "${pkg_name}"
}

sync_packages() {
    tmp_dir=$(mktemp -d)
    tmp_a=$(mktemp -p "${tmp_dir}")
    tmp_b=$(mktemp -p "${tmp_dir}")

    trap 'rm -rf "${tmp_dir}"' EXIT

    # Write contents to temporary files
    yay -Qqe > "${tmp_a}"
    printf "${packages_to_install[*]}" | tr ' ' '\n' | sort > "${tmp_b}"

    # Install needed packages
    mapfile -t packages_to_add < <(comm -13 "${tmp_a}" "${tmp_b}")
    if [[ -n "${packages_to_add[@]}" ]]; then
        echo "Installing missing packages ==========================="
        yay -Sy
        yay -S "${packages_to_add[@]}"
    fi

    # Remove old packages
    mapfile -t packages_to_remove < <(comm -23 "${tmp_a}" "${tmp_b}")
    if [[ -n "${packages_to_remove[@]}" ]]; then
        echo "Removing packages not needed anymore =================="
        yay -Rns "${packages_to_remove[@]}"
    fi

    # Remove orphaned packages
    mapfile -t orphaned_packages < <(yay -Qdtq)
    if [[ -n "${orphaned_packages[@]}" ]]; then
        echo "Removing orphaned packages ============================"
        yay -Rns "${orphaned_packages[@]}"
    fi
}

# Manage packages
ensure_yay_is_installed
sync_packages

# Manual packages
ensure_st_is_installed
ensure_dmenu_is_installed
ensure_slock_is_installed
